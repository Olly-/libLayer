library libMufasaLayer;

{$mode objfpc}{$H+}
{$macro on}
{$define callconv := {$IFDEF WINDOWS}{$IFDEF CPU32}cdecl{$ELSE}{$ENDIF}{$ENDIF}
                     {$IFDEF LINUX}{$IFDEF CPU32}cdecl{$ELSE}{$ENDIF}{$ENDIF}}

uses
  Classes, SysUtils, MufasaLayer;

var
  OldMemoryManager: TMemoryManager;
  MemIsSet: Boolean = False;

type
  PParamArray = ^TParamArray;
  TParamArray = array[Word] of Pointer;

procedure lpMufasaLayer_Init(const Params: PParamArray); callconv;
begin
  Writeln('>>', PString(Params^[1])^,.' <<');
end;

function GetPluginABIVersion: Integer; callconv; export;
begin
  Result := 2;
end;

procedure SetPluginMemManager(MemMgr : TMemoryManager); callconv; export;
begin
  if (MemIsSet) then
    Exit;
  GetMemoryManager(OldMemoryManager);
  SetMemoryManager(MemMgr);
  MemIsSet := True;
end;

procedure OnDetach; callconv; export;
begin
  SetMemoryManager(OldMemoryManager);
end;

function GetTypeCount(): Integer; callconv; export;
begin
  Result := 1;
end;

function GetTypeInfo(x: Integer; var sType, sTypeDef: PChar): integer; callconv; export;
begin
  StrPCopy(sType, 'TMufasaLayer');
  StrPCopy(sTypeDef, 'type TObject');
  Result := x;
end;

function GetFunctionCount(): Integer; callconv; export;
begin
  Result := 1;
end;

function GetFunctionInfo(x: Integer; var ProcAddr: Pointer; var ProcDef: PChar): Integer; callconv; export;
begin
  case x of
    0:
      begin
        ProcAddr := @lpMufasaLayer_Init;
        StrPCopy(ProcDef, 'procedure TMufasaLayer.HelloPlugin(s: String); Native;');
      end;
  end;

  Result := x;
end;

exports GetPluginABIVersion;
exports SetPluginMemManager;
exports GetTypeCount;
exports GetTypeInfo;
exports GetFunctionCount;
exports GetFunctionInfo;
exports OnDetach;

begin
end.
